version: "3.7"

networks:
  t2_proxy:
    name: t2_proxy
    driver: bridge
    ipam:
      config:
        - subnet: 192.168.90.0/24
  default:
    driver: bridge
  socket_proxy:
    name: socket_proxy
    driver: bridge
    ipam:
      config:
        - subnet: 192.168.91.0/24

services:
  # Socket Proxy
  socket-proxy:
    container_name: socket-proxy
    image: tecnativa/docker-socket-proxy
    restart: always
    networks:
      socket_proxy:
        ipv4_address: 192.168.91.254 # You can specify a static IP
    privileged: true
    #ports:
    # - "127.0.0.1:2375:2375" # Port 2375 should only ever get exposed to the internal network. When possible use this line.
    # I use the next line instead, as I want portainer to manage multiple docker endpoints within my home network.
    # - "2375:2375"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
    environment:
      - LOG_LEVEL=info # debug,info,notice,warning,err,crit,alert,emerg
      ## Variables match the URL prefix (i.e. AUTH blocks access to /auth/* parts of the API, etc.).
      # 0 to revoke access.
      # 1 to grant access.
      ## Granted by Default
      - EVENTS=1
      - PING=1
      - VERSION=1
      ## Revoked by Default
      # Security critical
      - AUTH=0
      - SECRETS=0
      - POST=1 # Ouroboros
      # Not always needed
      - BUILD=0
      - COMMIT=0
      - CONFIGS=0
      - CONTAINERS=1 # Traefik, portainer, etc.
      - DISTRIBUTION=0
      - EXEC=0
      - IMAGES=1 # Portainer
      - INFO=1 # Portainer
      - NETWORKS=1 # Portainer
      - NODES=0
      - PLUGINS=0
      - SERVICES=1 # Portainer
      - SESSION=0
      - SWARM=0
      - SYSTEM=0
      - TASKS=1 # Portaienr
      - VOLUMES=1 # Portainer

  # Traefik
  # mkdir ~/docker/appdata/traefik2/acme
  # touch ~/docker/appdata/traefik2/acme/acme.json
  # chmod 600 ~/docker/appdata/traefik2/acme/acme.json
  # touch ~/docker/appdata/traefik2/traefik.log
  traefik:
    image: traefik:v2.2.1 # v2.2
    container_name: traefik
    restart: always
    depends_on:
      - "socket-proxy"
    command: # CLI arguments
      - --global.checkNewVersion=true
      - --global.sendAnonymousUsage=true
      - --entryPoints.http.address=:80
      - --entryPoints.https.address=:443
        # Allow these IPs to set the X-Forwarded-* headers - Cloudflare IPs: https://www.cloudflare.com/ips/
      - --entrypoints.https.forwardedHeaders.trustedIPs=173.245.48.0/20,103.21.244.0/22,103.22.200.0/22,103.31.4.0/22,141.101.64.0/18,108.162.192.0/18,190.93.240.0/20,188.114.96.0/20,197.234.240.0/22,198.41.128.0/17,162.158.0.0/15,104.16.0.0/12,172.64.0.0/13,131.0.72.0/22
      - --entryPoints.traefik.address=:8080
      # - --entryPoints.ping.address=:8081
      - --api=true
      - --api.dashboard=true
      # - --api.insecure=true
      # - --serversTransport.insecureSkipVerify=true
      # - --ping=true
      # - --pilot.token=$TRAEFIK_PILOT_TOKEN
      - --log=true
      - --log.level=DEBUG # (Default: error) DEBUG, INFO, WARN, ERROR, FATAL, PANIC
      - --accessLog=true
      - --accessLog.filePath=/traefik.log
      - --accessLog.bufferingSize=100 # Configuring a buffer of 100 lines
      - --accessLog.filters.statusCodes=400-499
      - --providers.docker=true
      # - --providers.docker.endpoint=unix:///var/run/docker.sock
      # Use Docker Socket Proxy for improved security
      - --providers.docker.endpoint=tcp://socket-proxy:2375
      # Automatically set Host Rule for services
      # - --providers.docker.defaultrule=Host(`{{ index .Labels "com.docker.compose.service" }}.${DOMAINNAME}`)
      - --providers.docker.exposedByDefault=false
      # - --entrypoints.https.http.middlewares=chain-basic-auth@file
      - --entrypoints.https.http.tls.options=tls-opts@file
      # Add dns-cloudflare as default certresolver for all services. Also enables TLS and no need to specify on individual services
      - --entrypoints.https.http.tls.certresolver=dns-cloudflare
      - --entrypoints.https.http.tls.domains[0].main=$DOMAINNAME
      - --entrypoints.https.http.tls.domains[0].sans=*.$DOMAINNAME
      - --providers.docker.network=t2_proxy
      - --providers.docker.swarmMode=false
      - --providers.file.directory=/rules # Load dynamic configuration from one or more .toml or .yml files in a directory.
      - --providers.file.watch=true # Only works on top level files in the rules folder
      # - --certificatesResolvers.dns-cloudflare.acme.caServer=https://acme-staging-v02.api.letsencrypt.org/directory # LetsEncrypt Staging Server - uncomment when testing
      - --certificatesResolvers.dns-cloudflare.acme.email=$CLOUDFLARE_EMAIL
      - --certificatesResolvers.dns-cloudflare.acme.storage=/acme.json
      - --certificatesResolvers.dns-cloudflare.acme.dnsChallenge.provider=cloudflare
      - --certificatesResolvers.dns-cloudflare.acme.dnsChallenge.resolvers=1.1.1.1:53,1.0.0.1:53
      - --certificatesResolvers.dns-cloudflare.acme.dnsChallenge.delayBeforeCheck=90 # To delay DNS check and reduce LE hitrate
    networks:
      t2_proxy:
        ipv4_address: 192.168.90.254
      socket_proxy:
    security_opt:
      - no-new-privileges:true
    #healthcheck:
    #  test: ["CMD", "traefik", "healthcheck", "--ping"]
    #  interval: 5s
    #  retries: 3
    ports:
      - target: 80
        published: 80
        protocol: tcp
        mode: host
      - target: 443
        published: 443
        protocol: tcp
        mode: host
      # - target: 8080
      #   published: 8080
      #   protocol: tcp
      #   mode: host
    volumes:
      - $DATA_DIR/traefik2/rules:/rules 
      # - /var/run/docker.sock:/var/run/docker.sock:ro
      - $DATA_DIR/traefik2/acme/acme.json:/acme.json 
      - $DATA_DIR/traefik2/traefik.log:/traefik.log
      - $DATA_DIR/shared:/shared
    environment:
      - CF_API_EMAIL=$CLOUDFLARE_EMAIL
      - CF_API_KEY=$CLOUDFLARE_API_KEY
      - HTPASSWD=$HTPASSWD
    labels:
      #- "autoheal=true"
      - "traefik.enable=true"
      # HTTP-to-HTTPS Redirect
      - "traefik.http.routers.http-catchall.entrypoints=http"
      - "traefik.http.routers.http-catchall.rule=HostRegexp(`{host:.+}`)"
      - "traefik.http.routers.http-catchall.middlewares=redirect-to-https"
      - "traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https"
      # HTTP Routers
      - "traefik.http.routers.traefik-rtr.entrypoints=https"
      - "traefik.http.routers.traefik-rtr.rule=Host(`traefik.$DOMAINNAME`)"
      ## Services - API
      - "traefik.http.routers.traefik-rtr.service=api@internal"
      ## Healthcheck/ping
      #- "traefik.http.routers.ping.rule=Host(`traefik.$DOMAINNAME`) && Path(`/ping`)"
      #- "traefik.http.routers.ping.tls=true"
      #- "traefik.http.routers.ping.service=ping@internal"
      ## Middlewares
      - "traefik.http.routers.traefik-rtr.middlewares=chain-basic-auth@file"

  # Traefik Cert Dumper
  certdumper:
    container_name: traefik_certdumper
    image: ldez/traefik-certs-dumper:v2.7.4
    entrypoint: sh -c '
      apk add jq
      ; while ! [ -e /data/acme.json  ]
      || ! [ `jq ".[] | .Certificates | length" /data/acme.json` != 0  ]; do
      sleep 1
      ; done
      && traefik-certs-dumper file --version v2 --watch
      --source /data/acme.json --dest /output/certs'
    volumes:
      - $DATA_DIR/traefik2/acme:/data:ro
      - $DATA_DIR/shared:/output:rw
    environment:
      - DOMAIN=$DOMAINNAME

  # Dynamic DNS Updater
  cf-ddns:
    container_name: cf-ddns
    image: oznu/cloudflare-ddns
    restart: unless-stopped
    environment:
      - API_KEY=$CLOUDFLARE_API_TOKEN
      - ZONE=$DOMAINNAME

  # Cloudflare-Companion - Automatic CNAME DNS Creation
  cf-companion:
    container_name: cf-companion
    image: tiredofit/traefik-cloudflare-companion:latest
    security_opt:
      - no-new-privileges:true
    restart: unless-stopped
    networks:
      - socket_proxy
    depends_on:
     - socket-proxy
    environment:
      - TIMEZONE=$TZ
      - TRAEFIK_VERSION=2
      #- CF_EMAIL=$CLOUDFLARE_EMAIL
      - CF_TOKEN=$CLOUDFLARE_API_TOKEN
      - TARGET_DOMAIN=$DOMAINNAME
      - DOMAIN1=$DOMAINNAME
      - DOMAIN1_ZONE_ID=$CLOUDFLARE_ZONEID # Copy from Cloudflare Overview page
      - DOMAIN1_PROXIED=TRUE
      - DOCKER_HOST=tcp://socket-proxy:2375
    labels:
      # Add hosts specified in rules here to force cf-companion to create the CNAMEs
      # Since cf-companion creates CNAMEs based on host rules, this a workaround for non-docker/external apps
      - "traefik.http.routers.cf-companion-rtr.rule=Host(`mox.$DOMAINNAME`) || Host(`pwt.$DOMAINNAME`) || Host(`webmin.$DOMAINNAME`) || Host(`shell.$DOMAINNAME`)"

  flame:
    image: pawelmalak/flame
    container_name: flame
    networks:
      - t2_proxy
    volumes:
      - $DATA_DIR/flame:/app/data
    environment:
      - PASSWORD=$FLAME_PASSWORD
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.dash-rtr.entrypoints=https"
      - "traefik.http.routers.dash-rtr.rule=Host(`dash.$DOMAINNAME`)"
      ## Middlewares
      - "traefik.http.routers.dash-rtr.middlewares=chain-no-auth@file"
      ## HTTP Services
      - "traefik.http.routers.dash-rtr.service=dash-svc"
      - "traefik.http.services.dash-svc.loadbalancer.server.port=5005"

  # Password Safe
  vaultwarden:
    container_name: vaultwarden
    image: vaultwarden/server:latest
    restart: always
    networks:
      - t2_proxy
    security_opt:
      - no-new-privileges:true
    environment:
      # - WEBSOCKET_ENABLED=true
      - DOMAIN=https://vw.$DOMAINNAME
      - SIGNUPS_ALLOWED=false
      - SHOW_PASSWORD_HINT=false
      - SMTP_HOST=$SMTP_HOST
      - SMTP_FROM=vaultwarden@$DOMAINNAME
      - SMTP_FROM_NAME=VaultWarden
      - SMTP_PORT=$SMTP_PORT
      - SMTP_SSL=true
      - SMTP_EXPLICIT_TLS=true
      - SMTP_USERNAME=$SMTP_USER
      - SMTP_PASSWORD=$SMTP_PASS
    volumes:
      - $DATA_DIR/vw-data:/data
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.vw-rtr.entrypoints=https"
      - "traefik.http.routers.vw-rtr.rule=Host(`vw.$DOMAINNAME`)"
      ## Middlewares
      - "traefik.http.routers.vw-rtr.middlewares=chain-no-auth@file"
      ## HTTP Services
      - "traefik.http.routers.vw-rtr.service=vw-svc"
      - "traefik.http.services.vw-svc.loadbalancer.server.port=80"


  freshrss:
    container_name: freshrss
    image: freshrss/freshrss:latest
    restart: unless-stopped
    depends_on:
      - freshrss_db
    volumes:
      - $DATA_DIR/freshrss/data:/var/ww/FreshRSS/data
      - $DATA_DIR/freshrss/extensions:/var/ww/FreshRSS/extensions
    environment:
      - CRON_MIN='*/20'
      - TZ=$TZ
    networks:
      - t2_proxy
      - default
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.rss-rtr.entrypoints=https"
      - "traefik.http.routers.rss-rtr.rule=Host(`rss.$DOMAINNAME`)"
      ## Middlewares
      - "traefik.http.routers.rss-rtr.middlewares=chain-no-auth@file"
      ## HTTP Services
      - "traefik.http.routers.rss-rtr.service=rss-svc"
      - "traefik.http.services.rss-svc.loadbalancer.server.port=80"

  freshrss_db:
    container_name: freshrss_db
    image: postgres:12-alpine
    environment:
      - POSTGRES_USER=freshrss
      - POSTGRES_PASSWORD=freshrss
      - POSTGRES_DB=freshrss
    volumes:
      - $DATA_DIR/fresrss_db:/var/lib/postgresql/data
    networks:
      - default
    restart: always

  
  archivebox:
    image: archivebox/archivebox:latest
    container_name: archivebox
    restart: unless-stopped
    command: server --quick-init 0.0.0.0:8000
    networks:
      - t2_proxy
    environment:
      - ALLOWED_HOSTS=*
      - MEDIA_MAX_SIZE=750m
      - PUBLIC_INDEX=False
    volumes:
      - $DATA_DIR/archivebox:/data
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.archive-rtr.entrypoints=https"
      - "traefik.http.routers.archive-rtr.rule=Host(`archive.$DOMAINNAME`)"
      ## Middlewares
      - "traefik.http.routers.archive-rtr.middlewares=chain-no-auth@file"
      ## HTTP Services
      - "traefik.http.routers.archive-rtr.service=archive-svc"
      - "traefik.http.services.archive-svc.loadbalancer.server.port=8000"

  archivebox_schedule:
    image: archivebox/archivebox:latest
    container_name: archivebox_schedule
    command: schedule --foreground --every=day --depth=1 'https://getpocket.com/users/samjwillis97/feed/all'
    environment:
      - USE_COLOR=True
      - SHOW_PROGRESS=False
    volumes:
      - $DATA_DIR/archivebox:/data

  joplin:
    image: joplin/server:latest
    container_name: joplin
    restart: unless-stopped
    networks:
      - default
      - t2_proxy
    depends_on:
      - joplin_db
    environment:
      - APP_PORT=${JOPLIN_PORT}
      - APP_BASE_URL=https://joplin.${DOMAINNAME}
      - DB_CLIENT=pg
      - POSTGRES_PASSWORD=${JOPLIN_DB_PASS}
      - POSTGRES_DATABASE=${JOPLIN_DB}
      - POSTGRES_USER=${JOPLIN_DB_USER}
      - POSTGRES_PORT=${JOPLIN_DB_PORT}
      - POSTGRES_HOST=joplin_db
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.joplin-rtr.entrypoints=https"
      - "traefik.http.routers.joplin-rtr.rule=Host(`joplin.$DOMAINNAME`)"
      ## Middlewares
      - "traefik.http.routers.joplin-rtr.middlewares=chain-no-auth@file"
      ## HTTP Services
      - "traefik.http.routers.joplin-rtr.service=joplin-svc"
      - "traefik.http.services.joplin-svc.loadbalancer.server.port=${JOPLIN_PORT}"

  joplin_db:
    image: postgres:13
    container_name: joplin_db
    restart: unless-stopped
    networks:
      - default
    ports:
      - "${JOPLIN_DB_PORT}:${JOPLIN_DB_PORT}"
    volumes:
      - $DATA_DIR/joplin_db:/var/lib/postgresql/data
    environment:
      - POSTGRES_PASSWORD=${JOPLIN_DB_PASS}
      - POSTGRES_USER=${JOPLIN_DB_USER}
      - POSTGRES_DB=${JOPLIN_DB}

